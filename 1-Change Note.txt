2025.6.18
1.为了解决长期运行中偶然出现的bug，进行了如下优化：
	当wait for/wait for any函数在执行时，会临时关闭auto delete功能，以免出现获取主窗口内容出现异常；
	优化了wait for/wait for any函数的意外处理。
2.在20250618v2的版本中，多增加了高亮功能，多行循环脚本区域中，正在执行的脚本，会高亮当前运行到哪一行了。
（本功能需要测试的case太多，无法保证没有bug，如果遇到问题，建议用20250618版本）

2025.5.27
1.将几个文本编辑窗口的undo/redo的记忆步数调整为20，避免无限制的内存占用。
2.优化了wait、wait_for相关函数的变量声明，减少内存占用。
3.在自动清屏时，增加了对文字的tag的删除操作，减少内存增长。

2025.5.26
1.将“自动清屏”勾选框设置为默认勾选状态，避免长时间运行后占用内存过多引起程序崩溃。

2025.5.23
1.修复了使用按键相关功能对等待符号的错误逻辑，现在会正确的获取窗口中新出现的字符串，并且不受自动清屏带来的坐标变动的影响。
2.修复了使用按键的send功能会发送包含注释内容的bug。
3.修复了按键区域的wait for x for t语句的错误逻辑，现在可以正确的识别窗口中新出现的字符串，并且不受自动清屏带来的坐标变动的影响。
4.增加了“自动清屏”勾选框，默认不勾选，默认不自动清屏，勾选后才会每10s检测一次窗口内容是否超出10万字符并删除一半行。（建议长期运行时要勾选，python的GUI非常占用内存，会导致卡顿或死机）

2025.5.21
1.按键区域右键-edit，弹出的窗口，现在也根据主题的颜色进行变化。
2.按键区域右键-edit，弹出窗口的多行文本框，如果某一行以#开头，则该行会变成绿色并变成斜体。

2025.5.19
1.调整了脚本发送区域的高度，从10增加到了15.
2.修改了power shell返回内容的编码格式，从UTF-8修改为了GBK，现在power shell返回的中文会正常显示。

2025.5.16
1.增加了wait_for_any(["xxx","yyy","zzz",……],t)函数，可以同时搜索多个字符串，发现任意一个就会停止搜索，然后返回发现的字符串，如果超过t秒未发现，则返回None。
2.新增了wait_for_any()的示例，参见"Example Scripts searching multiple strings and response accordinglly.txt“。
3.修改了部分示例txt的错误内容，特别要注意一下，Term和TermPlus中直接复制出来的的字符串有时会带有不可见的字符，可能会导致报错或匹配失败。

2025.5.15
1.为主窗口、按键编辑窗口、单行发送框、脚本编辑框，增加了undo和redo的功能，对于字符的输入和删除，可以通过ctrl+z和ctrl+y来进行撤销和恢复。

2025.5.13
1.修复了打开多个按键的edit窗口后，保存按键会保存到错误的地方的bug。
2.按键的edit窗口中，当选中多行后按下send按键时，会识别以#开头的行，不会发送其内容。
3.增加了send & next按键的功能，让其会将下一个要发送的行被选中，更好观察当前发送到哪一行了。
4.修改了tab区域的颜色显示，让未选中的tab为灰色或深色，选中的tab始终为白色，更好看出当前是哪个tab在最前。
5.增加了保存上次自动清屏删除了多少行的全局变量，让脚本运行区域的wait_for函数不会因为自动清屏而遗漏新出现的内容。
6.修复了打开.ts文件和保存.ts文件时使用的编码不相同导致的文件异常的问题，现在统一使用gbk编码。
7.对标签页按下右键进入rename窗口时，会将当前的name显示在窗口中，以便在此基础上进行修改。
8.在关闭自动保存时，会立即进行一次保存，防止遗漏掉最新出现的内容。

2025.5.7
1.完善了所有示例脚本的注释和说明，详细解释了所有函数的使用方法和注意事项。

2025.5.6
1.增加了使用脚本去开关COM port和配置COM port的功能，增加了使用的示例，参见“Example Scripts changing COM setup with srcipts.txt”。
2.修改了深色主题下的光标颜色为白色，之前深色主题下光标为黑色，观察过于困难。
3.修改了脚本运行按键“开始”的使能状态变化逻辑，现在即使串口未打开，也可以运行脚本。

2025.4.30
1.增加了对SCPI功能的支持，通过对串口发送以下四个函数，可以实现对安捷伦的N5767A程控电源的控制。
-visa_init(addr)
-visa_query(cmd)
-visa_write(cmd)
-visa_read()
上面的函数直接发送、按键发送和脚本发送都可以，使用后面的语句前需要先发送init函数。
2.增加了一个示例，展示了如何使用这些语句来查询和开关N5767A电源的输出。示例为“Example Scripts check N5767A power status and power on-off it.txt”。


2025.4.29
1.完善了power shell相关功能，可以直接在text area看到power shell的输入和输出情况。
2.完善了multi_loop_send文本框的高亮显示功能，自定义的相关函数名会被高亮。
3.之前增加了button edit弹出的窗口的按钮的快捷键，但未记录在本note中，现在加入记录。F1 F5 F9分别对应三个发送按键。
4.多行循环可以使用的函数增加可以向窗口插入文字的函数。参见“Example Scripts searching specific respond and stop 2.txt”。

2025.4.28
1.增加了对power shell的打开和发送命令的功能，在主窗口、单行发送、按键发送、脚本发送区域，发送“open power shell"会打开一个power shell，发送”power shell send XXX“会发送”XXX“的字符串。
2.增加了使用power shell的示例
3.修改了UI的字体，全部统一使用微软雅黑、9号，修改了UI的颜色和文字的颜色。
4.增加了脚本发送区域的高亮显示，让python的默认关键字、函数名以及本GUI自定义的几个函数名会被蓝色高亮显示。

2025.4.25
1.增加了主题按钮，按下后会在浅色主题和深色主题之前切换。
2.修改了按键区域的右键菜单弹出后的send按钮，让send按钮会发送光标所在行，或者发送选中的多行。
3.修改了“等待符号”的输入框，变成了可以输入也可以选择的输入框。
4.修改了按键区域的右键菜单弹出后的send all和send在发送多行时，对“等待符号”的报错文字，现在会显示“串口未收到设置的等待符号，发送终止，请设置或去掉等待符号。”。

2025.4.24
1.增加了在主窗口中按下backspace和左右键的限制，使得backspace仅能删除输入的字符串，使得左右键无法将光标移动至输入的字符串以外的位置。

2025.4.23
1.删除了主窗口和侧边栏的最大化切换按键
2.在左上角增加了3个按键，用于切换按键区、脚本区、配置区的显示和隐藏。
3.调整了所有控件的布局方式，使得上面的改动能够实现。
4.优化了空间之间的间隙，显示和调整更直观。

2025.4.15
1.修复了单行循环发送时不显示发送时间戳的问题。
2.增加了主窗口的最大化和最小化按钮。
3.将多行循环发送按钮拆分成了开始、暂停、停止三个按键，让正在运行的自定义脚本可以暂停和继续。

2025.4.11
1.增加了2个示例脚本，需要使用对应的版本才能运行，老版本无法运行这2个示例。
Example Scripts monitoring temperature and auto stop.txt
脚本1：可以在循环发送ts r命令的同时，读取回复的内容，当检测到Board字符串后方的数字大于30时，则弹出弹窗并停止循环；
Example Scripts searching specific respond and stop.txt
脚本2：可以在循环发送任意命令的同事，读取回复的内容，检测是否出现指定的字符串，如果出现则弹窗并停止循环。
2.增加了“多行循环发送”的代码空间支持的函数，从而支持新增的2个脚本运行。


2025.4.9
1.增加了时间戳check box，选中后，发送和接收的内容前都会增加一个“Send at xx:xx:xx.xxx”和“Receive atxx:xx:xx.xxx”，分别为蓝色和绿色。接收时间戳会第一个字符接收到后显示，显示后如果超过0.1秒没有持续接收到字符，才会显示下一个接收时间戳。

2025.4.1
1.将单条发送框变成了下拉框，可以在其中看到历史发送过的命令，在主窗口中按下enter发送和在单条发送框中发送，共享同一个历史命令存储。在单条发送框中按下键和上键，会移动到历史发送命令去。在主窗口中按上下键，则会在最近发送过的命令中进行选择和替换。
2.在主窗口中可以对输入的命令进行backspace删除了，也可以用光标左右移动后删除，但如果输入命令期间，使用鼠标移动了光标，或由于接收到了回复的消息，打断了输入的连续性，则会出现删除的内容在主窗口中的显示和实际删除的指令的字符不对应的情况，但不影响命令的输入修改和发送。
3.新增了关闭时保存的内容，将历史命令也保存在了.ini文件中，下次打开时会加载上次关闭时的历史命令。


2025.3.24
1.修复了“Send & Next"按键的功能，之前增加调过#和wait开头的逻辑写错了，进行了更正。
2.修改了自动删除接收窗口中的逻辑，字符数量超过10万才删除，保留后面一半的行，之前是超过1万就删除，保留后面2屏幕。


2025.3.20
1.增加了2个文本框，用于输入“等待字符”和“超时时间”，这2个文本框的作用是：
	当点击标签页区域的按键时，如果按键里有多行内容，则会将所有行逐一发送出去，每发送出去一行，都会等待“等待字符”中的字符，然后才会继续发送下一行。
	如果等待的时间超过“超时时间”，则当次发送直接结束。
2.修改了周期性清屏的规则，每10s会检查接收窗口中的字符数量，超过1万的话则会删除前面的行，仅保留最后2屏幕的行。
3.修改了多行循环发送窗口中，wait for 函数的逻辑，让周期性清屏不会影响到wait for函数的搜索位置，可以正常运行。
4.修改了标签页区域，点击发送多行文本和send all按键的逻辑，让“等待字符”的功能和wait以及wait for语句不会冲突。
5.增加“等待字符”超时时的操作，会在窗口中增加超时的提醒。（在标签页区域和多行循环发送区域，使用wait for语句不会有超时提醒）